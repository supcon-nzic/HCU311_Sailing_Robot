#!/usr/bin/env python
"""Control the rudder servo

Subscribes: rudder_control (Int16)
"""
import time
#import pigpio
#import sensor_dep1.pwm_func as pwmf
import rospy
from std_msgs.msg import UInt16, Int16, String, Float32
import numpy as np

rudderdata = rospy.get_param('rudder')
rudderservo_PWM_offset = rudderdata['PWMoffset']
rudderservo_lower_limits = rudderdata['servolowerlimits']    #500
rudderservo_higher_limits = rudderdata['servohigherlimits']    #2500
rudderservo_netural_point = (rudderservo_lower_limits +
                             rudderservo_higher_limits) / 2
rudderservo_range = (rudderservo_higher_limits - rudderservo_lower_limits)

#PIN = rospy.get_param('rudder/pin')   #from servos_zju.yaml

def setup():
    pass
    #pi = pigpio.pi()
    #pi.set_mode(13, pigpio.OUTPUT) # GPIO 13/RPi PIN 33 as rudder servo pin
    #pwmf.pwm_export(PIN)
    #pwmf.pwm_period_config(PIN,20000000)   #set up pin
    #pwmf.pwm_enable(PIN)

def rudderservoPWMcontrol(data):
    """This function takes in the /rudder_control (90 to -90) value and directly write PWM signal to the rudder servo. Netural point was determined by the start and end points. rudderservoPWMoffset is used for software level trim. """
    degrees = data.data
    pwm = rudderservo_range*(-1.0*degrees)/90 + rudderservo_netural_point +\
         rudderservo_PWM_offset
    #pi.set_servo_pulsewidth(PIN, pwm)
    #pwmf.pwm_duty_cycle_config(PIN,pwm) #rudder output
    # pwm = 1800
    pwm = pwm*1000
    pub.publish(pwm)
    
def post():
    '''Power-On Self Test'''
    if not rospy.get_param('do_post', False):
        return
    rospy.logwarn('rudder test: lower limit')
    ##pi.set_servo_pulsewidth(PIN, rudderservo_netural_point)
    ##pwmf.pwm_duty_cycle_config(PIN,rudderservo_netural_point)
    #pwm_rudder = rudderservo_netural_point
    #pub = rospy.Publisher('pwm_rudder', Float64, queue_size=10)
    #pub.publish(pwm_rudder)
    #time.sleep(0.25)
     
if __name__ == '__main__':
    #pi = pigpio.pi()
    
    #pwmf.pwm_period_config(PIN,20000000)   #set up pin
    #pwmf.pwm_enable(PIN)

    post()
    try:
        rospy.init_node('actuator_driver_servos', anonymous=True)
        pub = rospy.Publisher('pwm_rudder', Float32, queue_size=10)
        rospy.Subscriber('rudder_control', Int16, rudderservoPWMcontrol)
        rospy.spin()
    except rospy.ROSInterruptException:
        pass
