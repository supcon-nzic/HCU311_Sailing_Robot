#!/usr/bin/python
# READY FOR MIT
# Simulator for the apparent wind node


import rospy
from std_msgs.msg import Float64, Float32
from sailing_robot.msg import Velocity
import time, math
import numpy as np


class Wind_simu():
    def __init__(self):
        """ 
            Simulate the apparent wind direction and speed based on the heading of the boat, its velocity 
            and the direction/speed given in the parameter file
        """
        self.wind_direction_pub = rospy.Publisher('wind_direction_apparent', Float64, queue_size=10)
        self.wind_speed_pub = rospy.Publisher('wind_speed_apparent', Float64, queue_size=10)

        rospy.init_node("simulation_wind_apparent", anonymous=True)

        rospy.Subscriber('heading', Float32, self.update_heading)
        
        self.wind_speed=3
        rospy.Subscriber('gps_velocity', Velocity, self.update_velocity)
        self.velocity = (0, 0)

        self.rate = rospy.Rate(rospy.get_param("config/rate"))
        #Noise
      
        rospy.loginfo("Wind direction simulated")
        self.wind_publisher()


    def update_heading(self, msg):
        self.heading = msg.data

    def update_velocity(self, msg):
        # velocity in the boat reference system
        self.velocity = (msg.speed * math.cos(math.radians(msg.heading - self.heading)),
                         msg.speed * math.sin(math.radians(msg.heading - self.heading)))


    def wind_publisher(self):

        while not rospy.is_shutdown():


            wind_speed_apparent = 3
            wind_direction_apparent = 180

            self.wind_speed_pub.publish(wind_speed_apparent)
            self.wind_direction_pub.publish(wind_direction_apparent)

            self.rate.sleep()


if __name__ == '__main__':
    try:
        Wind_simu()
    except rospy.ROSInterruptException:
        pass
